# to use packages installed here, simply source this file
# to make packages here available for any shell you started later automatically, just run this script
#  do note you still need to start a new shall before these configurations can take effect
# to undo what we have done when you executed this file, you should remove the line that sources this file
#  from your .bashrc file manually. Do not give us any change to *nuke* your bash configurations by mistake.
#  **We will miss you!**
# this will work only if you are using bash
# this file also provides a set of utility functions (commands) named new-environment-*
# use new-environment-[post/read]-news to post or read news
# use new-environment-[post/read]-comment to post or read comments

# function that will only be available in this file and scripts sourced by this file
_private_functions=(
  prepend_environment
  prepend_pathlike
)

# prepend "$3" to variable whose name is stored in "$1" when not already in
#  different entries in the variable are separated by "$2"
prepend_environment () {
  case "$2${!1}$2" in
    *"$2$3$2"*)
      ;;
    *)
      declare -g "$1=$3${!1:+$2${!1}}"
  esac
}

# since many variables are path-like, whose entries are separated by ':'
#  this helper will simplify the code
#  prepend $2 to variable whose name is stored in $1
prepend_pathlike () {
  prepend_environment "$1" ':' "$2"
}

# setup main PATH
#  most executables should be found under __{{export_directory}}__/bin
#  for packages that install executables to unusual location, create a script to be sourced under
#   __{{export_directory}}__/etc/profile.d/ to add extra entries properly
#  this also applies to all paths modified below
prepend_pathlike PATH '__{{export_directory}}__/bin'
export PATH

# make man pages available
#  in case the original value of $MANPATH is an empty string, there will be a tailing colon in the final value
#  therefore include default man paths
prepend_pathlike MANPATH '__{{export_directory}}__/share/man'
export MANPATH

# setup C and C++ compiler
export CC=clang
export CXX=clang++

# provide access to header files
prepend_environment CFLAGS ' ' '-I__{{export_directory}}__/include'
export CFLAGS
prepend_environment CXXFLAGS ' ' '-I__{{export_directory}}__/include'
export CXXFLAGS
prepend_pathlike CPATH '__{{export_directory}}__/include'
export CPATH

# provide access to libraries
prepend_environment LDFLAGS ' ' '-fuse-ld=lld'
export LDFLAGS
prepend_pathlike LIBRARY_PATH '__{{export_directory}}__/lib'
export LIBRARY_PATH

# add search path for pkg-config
prepend_pathlike PKG_CONFIG_PATH /usr/local/share/pkgconfig
prepend_pathlike PKG_CONFIG_PATH /usr/local/lib/pkgconfig
prepend_pathlike PKG_CONFIG_PATH '__{{export_directory}}__/lib/pkgconfig'
export PKG_CONFIG_PATH

# add runtime search directory
prepend_pathlike LD_LIBRARY_PATH '__{{export_directory}}__/lib'
prepend_pathlike LD_LIBRARY_PATH '__{{export_directory}}__/lib/x86_64-unknown-linux-gnu'
export LD_LIBRARY_PATH

# make packages installed available to cmake find_*
prepend_pathlike CMAKE_PREFIX_PATH '__{{export_directory}}__'
export CMAKE_PREFIX_PATH

# source extra scripts
if [ -d '__{{export_directory}}__/etc/profile.d/' ]; then
	for profile in '__{{export_directory}}__/etc/profile.d/'*.sh; do
		[ -r "${profile}" ] && . "${profile}"
	done
	unset profile
fi

for func in "${_private_functions[@]}";do
  unset -f "${func}"
done

# helping functions
new-environment-list-packages(){
  for version_file in "__{{install_directory}}__/"*.version;do
    echo "$(basename "${version_file::-8}"): $(cat "${version_file}")"
  done
}
new-environment-read-news(){
  if [ ! -f "__{{export_directory}}__/.meta/NEWS" ];then
    printf -- 'no news for now\n'
    return
  fi
  less -r "__{{export_directory}}__/.meta/NEWS"
}
new-environment-post-news(){
  vim "__{{export_directory}}__/.meta/NEWS"
}
new-environment-read-comment(){
  less "__{{export_directory}}__/.meta/"*.comment
}
new-environment-post-comment(){
  vim "__{{export_directory}}__/.meta/$(whoami).comment"
}
new-environment-get-export-directory(){
  printf -- '__{{export_directory}}__'
}
new-environment-get-install-directory(){
  printf -- '__{{install_directory}}__'
}
# export these functions to make it available in sub shells
export -f new-environment-get-export-directory
export -f new-environment-get-install-directory


# if this script is invoked directly, append a source command to .bashrc of the user
#  when a script is sourced, the value of $0 is not changed therefore will not point to this script
if [ "$(realpath -- "$0")" = '__{{export_directory}}__/README' ];then
  # add empty line so that we will not break things even if there is no empty line at the end of .bashrc
  echo >> "${HOME}/.bashrc"
  echo 'source __{{export_directory}}__/README' >> "${HOME}/.bashrc"
  printf -- '\x1b[1;32mYou are ready to go now! Welcome!\x1b[0m\n'
  printf -- '\x1b[1;32m Though you still need to restart your shell...\x1b[0m\n'
fi
